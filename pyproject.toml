[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-code-helper"
version = "1.0.0"
description = "Production-grade RAG system for Python coding assistance"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Python Code Helper Team", email = "team@python-code-helper.com"}
]
maintainers = [
    {name = "Python Code Helper Team", email = "team@python-code-helper.com"}
]
keywords = ["rag", "python", "ai", "coding-assistant", "llm", "vector-search"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.2",
    "pydantic-settings>=2.0.3",
    "openai>=1.3.3",
    "langchain>=0.0.335",
    "sentence-transformers>=2.2.2",
    "pinecone-client>=2.2.4",
    "pandas>=2.1.3",
    "numpy>=1.24.3",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "PyGithub>=1.59.1",
    "redis>=5.0.1",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "rank-bm25>=0.2.2",
    "beautifulsoup4>=4.12.2",
    "tiktoken>=0.5.1",
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "rich>=13.6.0",
    "jinja2>=3.1.2",
    "tenacity>=8.2.3",
    "tqdm>=4.66.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "black>=23.10.1",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "ruff>=0.1.5",
]
evaluation = [
    "ragas>=0.0.22",
    "datasets>=2.14.6",
]
production = [
    "gunicorn>=21.2.0",
    "celery>=5.3.4",
]

[project.urls]
Homepage = "https://github.com/your-org/python-code-helper"
Documentation = "https://python-code-helper.readthedocs.io/"
Repository = "https://github.com/your-org/python-code-helper.git"
"Bug Tracker" = "https://github.com/your-org/python-code-helper/issues"

[project.scripts]
code-helper = "src.cli.main:cli"
code-helper-server = "src.api.main:main"
code-helper-indexer = "src.ingestion.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pinecone.*",
    "sentence_transformers.*",
    "rank_bm25.*",
    "ragas.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B018"]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true 