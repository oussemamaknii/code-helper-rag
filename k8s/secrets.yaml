# NOTE: This is a template file. In production, use proper secret management
# such as Kubernetes secrets, Vault, or cloud provider secret managers.
# Never commit real secrets to version control.

apiVersion: v1
kind: Secret
metadata:
  name: python-code-helper-secrets
  namespace: python-code-helper
  labels:
    app.kubernetes.io/name: python-code-helper
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: python-code-helper-system
type: Opaque
data:
  # API Keys (base64 encoded)
  # Use: echo -n "your-api-key" | base64
  openai-api-key: ${OPENAI_API_KEY_B64}
  anthropic-api-key: ${ANTHROPIC_API_KEY_B64}
  pinecone-api-key: ${PINECONE_API_KEY_B64}
  github-token: ${GITHUB_TOKEN_B64}
  
  # Database credentials
  postgres-username: ${POSTGRES_USERNAME_B64}
  postgres-password: ${POSTGRES_PASSWORD_B64}
  
  # JWT secrets
  jwt-secret-key: ${JWT_SECRET_KEY_B64}
  jwt-refresh-secret: ${JWT_REFRESH_SECRET_B64}
  
  # Encryption keys
  encryption-key: ${ENCRYPTION_KEY_B64}
  
  # External service credentials
  elasticsearch-password: ${ELASTICSEARCH_PASSWORD_B64}

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: python-code-helper
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: python-code-helper-system
type: Opaque
data:
  postgres-db: cHl0aG9uX2NvZGVfaGVscGVy  # python_code_helper
  postgres-user: cG9zdGdyZXM=  # postgres
  postgres-password: ${POSTGRES_PASSWORD_B64}

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: python-code-helper
  labels:
    app.kubernetes.io/name: python-code-helper
    app.kubernetes.io/component: tls
    app.kubernetes.io/part-of: python-code-helper-system
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_CERT_B64}
  tls.key: ${TLS_KEY_B64} 